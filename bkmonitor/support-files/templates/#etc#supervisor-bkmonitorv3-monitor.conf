[unix_http_server]
file=/var/run/bkmonitorv3/monitor-supervisor.sock             ; (the path to the socket file)


[supervisord]
logfile=__BK_HOME__/logs/bkmonitorv3/monitor-supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10           ; (num of main logfile rotation backups;default 10)
loglevel=info                ; (log level;default info; others: debug,warn,trace)
pidfile=/var/run/bkmonitorv3/monitor-supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false               ; (start in foreground if true;default false)
minfds=1024                  ; (min. avail startup file descriptors;default 1024)
minprocs=200                 ; (min. avail process descriptors;default 200)
directory=__BK_HOME__/bkmonitorv3/monitor
environment=C_FORCE_ROOT=true,DJANGO_CONF_MODULE=conf.worker.production.${PLATFORM},DJANGO_SETTINGS_MODULE=settings,LOGGER_WITHOUT_CONSOLE=1


[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface


[supervisorctl]
serverurl=unix:///var/run/bkmonitorv3/monitor-supervisor.sock


[program:kernel_api]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/gunicorn --config gunicorn_config.py wsgi:application"
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:logging]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_service -s selfmonitor log"
numprocs=1                    ; number of processes copies to start (def 1)
priority=900                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:healthz]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_service -s selfmonitor healthz"
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=false
autorestart=false
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:healthz_daemon]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py healthz -d -i 600"
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:access_data]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_access -s access -H celery --access-type=data --hash-ring=1 --min-interval 0"
numprocs=1                    ; number of processes copies to start (def 1)
priority=800                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:access_real_time_data]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_access -s access --access-type=real_time_data --hash-ring=1 --min-interval 3"
numprocs=1                    ; number of processes copies to start (def 1)
priority=800                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:access_event]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_access -s access -H celery --access-type=event --min-interval 5"
numprocs=1                    ; number of processes copies to start (def 1)
priority=800                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:detect]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_service -s detect -H celery"
numprocs=1                    ; number of processes copies to start (def 1)
priority=700                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must s  tay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:nodata]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_service -s nodata -H celery --min-interval 0"
numprocs=1                    ; number of processes copies to start (def 1)
priority=700                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must s  tay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:trigger]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_service -s trigger --min-interval 0"
numprocs=1                    ; number of processes copies to start (def 1)
priority=300                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:alert]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/python manage.py run_discovery_service -s alert -H celery --max-cycles 1"
numprocs=1                    ; number of processes copies to start (def 1)
priority=800                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_beat]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app beat -l info  -S redbeat.RedBeatScheduler --pidfile=/var/run/bkmonitorv3/celerybeat.pid" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true

[program:celery_worker_api_cron]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -P gevent -Q celery_api_cron -c 5 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_report_cron]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -Q celery_report_cron -c 4 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_action]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8 -Q celery_running_action --maxtasksperchild=200 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true

[program:celery_worker_webhook_action]
process_name = %(program_name)s%(process_num)s
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8 -Q celery_webhook_action --maxtasksperchild=200 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_service]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -Q celery_service --maxtasksperchild=1000 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_service_access_event]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 2 -Q celery_service_access_event --maxtasksperchild=1000 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_cron]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8  -Q celery_cron --maxtasksperchild=1 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_image_exporter]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 2 -Q celery_image_exporter --maxtasksperchild=1 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_alert]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8  -Q  celery_alert_manager,celery_alert_builder --maxtasksperchild=50 -O fair" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_composite]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 2 -Q celery_composite --maxtasksperchild=10000 -O fair" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_fta_action]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8 -Q  celery_action,celery_interval_action --maxtasksperchild=100 -O fair" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_worker_converge]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8 -Q  celery_converge --maxtasksperchild=1000 -O fair" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true

[program:celery_worker_action_cron]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 8 -Q  celery_action_cron --maxtasksperchild=1000 -O fair" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true

[program:celery_worker_long_task_cron]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 2 -Q  celery_long_task_cron --maxtasksperchild=1000 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true

[program:prom_agg_gateway]
command=bash -c "__BK_HOME__/bkmonitorv3/monitor/bin/prom-aggregation-gateway --aggate_listen_udp=:__BK_MONITOR_PROM_PORT__ --aggate_listen_http=:__BK_MONITOR_PROM_PORT__"
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[program:celery_metadata_task_worker]
command=bash -c "sleep 10 && source bin/environ.sh && exec __BK_HOME__/.envs/bkmonitorv3-monitor/bin/celery -A alarm_backends.service.scheduler.app worker -l info -c 2  -Q celery_metadata_task_worker --maxtasksperchild=1 -O fair --without-gossip --without-mingle --without-heartbeat" ; "start" is a flag to differ from cronjob
numprocs=1                    ; number of processes copies to start (def 1)
priority=100                  ; the relative start priority (default 999)
startsecs=0                   ; number of secs prog must stay running (def. 1)
stopwaitsecs=30
autostart=true
autorestart=true
stdout_logfile=/dev/null
redirect_stderr=true
stopasgroup=true
killasgroup=true


[group:scheduler]
programs=celery_beat,celery_worker_service,celery_worker_cron,celery_image_exporter,celery_worker_api_cron,celery_worker_action,celery_worker_webhook_action,celery_worker_service_access_event,celery_worker_report_cron,celery_worker_alert,celery_worker_composite,celery_worker_fta_action,celery_worker_converge,celery_worker_action_cron,celery_worker_long_task_cron, celery_metadata_task_worker


[group:service]
programs=access_data,access_real_time_data,access_event,detect,nodata,trigger,alert,prom_agg_gateway

[group:selfmonitor]
programs=healthz,logging,healthz_daemon
