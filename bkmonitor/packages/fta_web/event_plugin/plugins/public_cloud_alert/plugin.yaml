plugin_id: public_cloud_alert
version: 0.3.0
plugin_display_name: 公有云告警接收
plugin_type: http_push
summary: 接收公有云告警，目前支持腾讯云和谷歌云
author: 蓝鲸智云

tags:
  - TENCENT CLOUD
  - GOOGLE CLOUD
  - AWS CLOUD
  - AZURE CLOUD

ingest_config:
  source_format: json
  multiple_events: true
  events_path: data
  alert_sources:
    - code: TENCENT
      name: 腾讯云
    - code: GOOGLE
      name: 谷歌云
    - code: AWS
      name: 亚马逊云
    - code: AZURE
      name: 微软云
  is_external: true
  collect_type: bk_collector

# 清洗配置
normalization_config: []
clean_configs:
  # 谷歌云的清洗配置
  - rules:
    - key: __http_headers__."user-agent"
      value:
        - "Google-Alerts"
      method: eq
      condition: or
    - key: __http_query_params__.source
      value:
        - "google"
      method: eq
      condition: or
    normalization_config:
      - field: alert_name
        expr: incident.policy_name
      - field: event_id
        expr: "['google_cloud_alert_{{plugin_inst_biz_id}}', incident.incident_id] | join('.', @)"
      - field: description
        expr: incident.summary
      - field: metric
        expr: incident.metric.type
      - field: status
        expr: "get_field({OPEN: 'ABNORMAL', open: 'ABNORMAL', CLOSED: 'CLOSED', closed: 'CLOSED'}, incident.state)"
      - field: severity
        expr: "get_field({Warning: '3', Error: '2', Critical: '1'}, incident.severity)"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "merge(incident.resource.labels, incident.metric.labels, {resource_type: incident.resource.type, metric_type: incident.metric.type, source: 'GOOGLE_CLOUD'})"
      - field: tags
        expr: |
          {
            scoping_project_id: incident.scoping_project_id,
            scoping_project_number: incident.scoping_project_number,
            resource_id: incident.resource_id,
            resource_name: incident.resource_name,
            resource_type_display_name: incident.resource_type_display_name,
            metric_display_name: incident.metric.displayName,
            url: incident.url
          }
  # 腾讯云的清洗配置
  - rules:
    - key: __http_query_params__.source
      value:
        - "tencent"
      method: eq
      condition: and
    - key: alarmType
      value:
        - "metric"
      method: eq
    normalization_config:
      - field: alert_name
        expr: alarmPolicyInfo.policyName
      - field: event_id
        expr: "['tencent_cloud_alert_{{plugin_inst_biz_id}}', sessionId] | join('.', @)"
      - field: description
        expr: alarmPolicyInfo.conditions.metricShowName
      - field: metric
        expr: alarmPolicyInfo.conditions.metricName
      - field: status
        expr: "get_field({status_1: 'ABNORMAL', status_0: 'RECOVERED'}, ['status', alarmStatus] | join('_', @))"
      - field: severity
        expr: "get_field({Warn: '2', Serious: '1', Remind: '3'}, alarmLevel) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: |
          alarmObjInfo.dimensions &&
          merge(
            alarmObjInfo.dimensions,
            {
              region: alarmObjInfo.region,
              namespace: alarmObjInfo.namespace,
              policyId: alarmPolicyInfo.policyId,
              source: 'TENCENT_CLOUD'
            }
          ) ||
          alarmObjInfo."tapm.instance.key" &&
          {
            "tapm.instance.key": alarmObjInfo."tapm.instance.key",
            "service.name": alarmObjInfo."service.name",
            "span.kind": alarmObjInfo."span.kind",
            operation: alarmObjInfo.operation,
            policyId: alarmPolicyInfo.policyId,
            source: 'TENCENT_CLOUD'
          } || 
          alarmObjInfo.level &&
          {
            level: alarmObjInfo.level,
            id: alarmObjInfo.id,
            instanceId: alarmObjInfo.instanceId,
            policyId: alarmPolicyInfo.policyId,
            source: 'TENCENT_CLOUD'
          }
      - field: tags
        expr: |
          {
            alarmType: alarmType,
            policyName: alarmPolicyInfo.policyName,
            policyType: alarmPolicyInfo.policyType,
            policyTypeCName: alarmPolicyInfo.policyTypeCName,
            metricName: alarmPolicyInfo.conditions.metricName,
            metricShowName: alarmPolicyInfo.conditions.metricShowName
          }
  - rules:
    - key: __http_query_params__.source
      value:
        - "tencent"
      method: eq
      condition: and
    - key: alarmType
      value:
        - "event"
      method: eq
    normalization_config:
      - field: alert_name
        expr: alarmPolicyInfo.policyName
      - field: event_id
        expr: "['tencent_cloud_alert_{{plugin_inst_biz_id}}', sessionId] | join('.', @)"
      - field: description
        expr: "join(' ', [alarmPolicyInfo.conditions.productShowName, alarmPolicyInfo.conditions.eventShowName])"
      - field: metric
        expr: alarmPolicyInfo.conditions.metricName
      - field: status
        expr: "get_field({status_1: 'ABNORMAL', status_0: 'RECOVERED'}, ['status', alarmStatus] | join('_', @))"
      - field: severity
        expr: "get_field({Warn: '2', Serious: '1', Remind: '3'}, alarmLevel) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: |
          merge(
            alarmObjInfo.dimensions,
            {
              region: alarmObjInfo.region,
              namespace: alarmObjInfo.namespace,
              policyId: alarmPolicyInfo.policyId,
              source: 'TENCENT_CLOUD'
            }
          )
      - field: tags
        expr: |
          {
            alarmType: alarmType,
            policyName: alarmPolicyInfo.policyName,
            policyType: alarmPolicyInfo.policyType,
            policyTypeCName: alarmPolicyInfo.policyTypeCName,
            productName: alarmPolicyInfo.conditions.productName,
            productShowName: alarmPolicyInfo.conditions.productShowName,
            eventName: alarmPolicyInfo.conditions.eventName,
            eventShowName: alarmPolicyInfo.conditions.eventShowName
          }
  - rules:
    - key: __http_query_params__.source
      value:
        - "tencent"
      method: eq
      condition: and
    - key: alarmType
      value:
        - "prometheus"
      method: eq
    normalization_config:
      - field: alert_name
        expr: alarmPolicyInfo.policyName
      - field: event_id
        expr: "['tencent_cloud_alert_{{plugin_inst_biz_id}}', sessionId] | join('.', @)"
      - field: description
        expr: alarmObjInfo.content
      - field: metric
        expr: alarmPolicyInfo.conditions.metricName
      - field: status
        expr: "get_field({status_1: 'ABNORMAL', status_0: 'RECOVERED'}, ['status', alarmStatus] | join('_', @))"
      - field: severity
        expr: "get_field({Warn: '2', Serious: '1', Remind: '3'}, alarmLevel) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: |
          merge(
            alarmObjInfo.tags,
            {
              policyId: alarmPolicyInfo.policyId,
              source: 'TENCENT_CLOUD'
            }
          )
      - field: tags
        expr: |
          {
            alarmType: alarmType,
            policyName: alarmPolicyInfo.policyName
          }
  - rules:
    - key: __http_query_params__.source
      method: eq
      value:
        - "aws"
    normalization_config:
      - field: alert_name
        expr: to_json(Message).AlarmName
      - field: event_id
        expr: "['aws_cloud_alert_{{plugin_inst_biz_id}}', to_json(Message).AlarmArn] | join('.', @)"
      - field: description
        expr: to_json(Message).NewStateReason
      - field: metric
        expr: to_json(Message).Trigger.MetricName
      - field: status
        expr: "get_field({ALARM: 'ABNORMAL', OK: 'RECOVERED', INSUFFICIENT_DATA: 'ABNORMAL'}, to_json(Message).NewStateValue)"
      - field: severity
        expr: "'1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "merge({source: 'AWS_CLOUD'}, zip((to_json(Message).Trigger.Dimensions || [])[*].name, (to_json(Message).Trigger.Dimensions || [])[*].value))"
      - field: tags
        expr: "{source: 'AWS_CLOUD'}"
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Platform"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.essentials.description
      - field: metric
        expr: "[data.alertContext.condition.allOf[0].metricNamespace || data.alertContext.condition.allOf[0].webTestName, data.alertContext.condition.allOf[0].metricName] | join('/', @)"
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "zip(data.alertContext.condition.allOf[0].dimensions[*].name, data.alertContext.condition.allOf[0].dimensions[*].value)"
      - field: tags
        expr: "data.alertContext.properties || {source: 'AZURE_CLOUD'}"
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Log Analytics"
        - "Application Insights"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.essentials.description
      - field: metric
        expr: "data.alertContext.SearchQuery"
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "zip(data.alertContext.Dimensions[*].name, data.alertContext.Dimensions[*].value)"
      - field: tags
        expr: "data.customProperties || {source: 'AZURE_CLOUD'}"
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Log Alerts V2"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.essentials.description
      - field: metric
        expr: "data.alertContext.condition.allOf[*].SearchQuery"
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "zip(data.alertContext.condition.allOf[0].dimensions[*].name, data.alertContext.condition.allOf[0].dimensions[*].value)"
      - field: tags
        expr: "data.customProperties || {source: 'AZURE_CLOUD'}"
  - rules:
    - key: __http_query_params__.source
      condition: and
      method: eq
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Activity Log - Administrative"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.essentials.description
      - field: metric
        expr: data.essentials.monitoringService
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "data.alertContext.authorization"
      - field: tags
        expr: "data.customProperties || {source: 'AZURE_CLOUD'}"
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Activity Log - Policy"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.alertContext.properties.description
      - field: metric
        expr: data.essentials.monitoringService
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: data.alertContext.authorization
      - field: tags
        expr: data.alertContext.properties
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Activity Log - Autoscale"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.alertContext.properties.description
      - field: metric
        expr: data.essentials.monitoringService
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: "{resourceName: data.alertContext.properties.resourceName}"
      - field: tags
        expr: data.alertContext.properties
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "Activity Log - Security"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: "['category:', data.alertContext.properties.category, 'threatID:', data.alertContext.properties.threatID, 'protectionType:', data.alertContext.properties.protectionType, 'severity:', data.alertContext.properties.severity, 'actionTaken:', data.alertContext.properties.actionTaken, 'protectionType:', data.alertContext.properties.protectionType, 'compromisedEntity:', data.alertContext.properties.compromisedEntity, 'attackedResourceType:', data.alertContext.properties.attackedResourceType] | join(' ', @)"
      - field: metric
        expr: data.essentials.monitoringService
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: |
          {
            category: data.alertContext.properties.category,
            threatID: data.alertContext.properties.threatID,
            protectionType: data.alertContext.properties.protectionType,
            severity: data.alertContext.properties.severity,
            actionTaken: data.alertContext.properties.actionTaken,
            protectionType: data.alertContext.properties.protectionType,
            compromisedEntity: data.alertContext.properties.compromisedEntity,
            attackedResourceType: data.alertContext.properties.attackedResourceType
          }
      - field: tags
        expr: data.alertContext.properties
  - rules:
    - key: __http_query_params__.source
      method: eq
      condition: and
      value:
        - "azure"
    - key: data.essentials.monitoringService
      method: eq
      value:
        - "ServiceHealth"
    normalization_config:
      - field: alert_name
        expr: data.essentials.alertRule
      - field: event_id
        expr: "['azure_cloud_alert_{{plugin_inst_biz_id}}', data.essentials.originAlertId] | join('.', @)"
      - field: description
        expr: data.alertContext.properties.title
      - field: metric
        expr: data.essentials.monitoringService
      - field: status
        expr: "get_field({Fired: 'ABNORMAL', Resolved: 'RECOVERED'}, data.essentials.monitorCondition)"
      - field: severity
        expr: "get_field({Sev0: '1', Sev1: '1', Sev2: '2', Sev3: '3', Sev4: '3'}, data.essentials.severity) || '1'"
      - field: bk_biz_id
        expr: "'{{plugin_inst_biz_id}}'"
      - field: dimensions
        expr: |
          {
            service: data.alertContext.properties.service,
            region: data.alertContext.properties.region,
            incidentType: data.alertContext.properties.incidentType
          }
      - field: tags
        expr: data.alertContext.properties
