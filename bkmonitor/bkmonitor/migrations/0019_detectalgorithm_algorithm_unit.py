# -*- coding: utf-8 -*-
"""
Tencent is pleased to support the open source community by making 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
Copyright (C) 2017-2025 Tencent. All rights reserved.
Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://opensource.org/licenses/MIT
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
"""
# Generated by Django 1.11.23 on 2020-09-02 03:59


from collections import defaultdict

from django.db import migrations, models

from bkmonitor.strategy.upgrade import get_metric_suffix_mapping, UPDATE_METRICS


def update_unit_and_algorithm_value(apps, *args, **kwargs):
    # 根据转换除数更新检测算法中的值
    ResultTableSQLConfig = apps.get_model("bkmonitor", "ResultTableSQLConfig")
    DetectAlgorithm = apps.get_model("bkmonitor", "DetectAlgorithm")
    Item = apps.get_model("bkmonitor", "Item")

    configs = ResultTableSQLConfig.objects.values("id", "unit_conversion", "result_table_id", "metric_field")

    metric_suffix = get_metric_suffix_mapping()

    query_config_units = {}
    for config in configs:
        metric_id = f"{config['result_table_id']}.{config['metric_field']}"
        suffix = metric_suffix.get(metric_id, "")
        if suffix:
            query_config_units[config["id"]] = suffix

    item_units = defaultdict(lambda: "")
    items = Item.objects.filter(rt_query_config_id__in=list(query_config_units.keys()))
    for item in items:
        item_units[item.id] = query_config_units[item.rt_query_config_id]

    algorithms = DetectAlgorithm.objects.filter(item_id__in=item_units.keys())
    for algorithm in algorithms:
        if not algorithm.algorithm_config or not item_units[algorithm.item_id]:
            continue

        algorithm.algorithm_unit = item_units[algorithm.item_id]
        algorithm.save()

    # 更新单位及转换除数
    for metric in UPDATE_METRICS:
        ResultTableSQLConfig.objects.filter(
            result_table_id=metric["table_id"], metric_field=metric["field_name"]
        ).update(unit=metric["unit"])


class Migration(migrations.Migration):

    dependencies = [
        ("bkmonitor", "0018_merge_20200902_1028"),
    ]

    operations = [
        migrations.AddField(
            model_name="detectalgorithm",
            name="algorithm_unit",
            field=models.CharField(blank=True, default="", max_length=32, verbose_name="算法单位"),
        ),
        migrations.RunPython(update_unit_and_algorithm_value),
    ]
