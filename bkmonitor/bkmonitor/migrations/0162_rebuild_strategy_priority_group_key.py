# Generated by Django 3.2.15 on 2024-04-26 10:08
import json
from collections import defaultdict

import xxhash
from django.db import migrations


def get_priority_group_key(bk_biz_id: int, items):
    """
    获取优先级分组key
    """
    query_config_fields = [
        "functions",
        "metric_field",
        "agg_dimension",
        "agg_interval",
        "agg_method",
        "bkmonitor_strategy_id",
        "custom_event_name",
        "result_table_id",
        "index_set_id",
        "alert_name",
        "keywords_query_string",
    ]

    query = []
    for item in items:
        query_config = item.query_configs[0]

        item_query = {
            "bk_biz_id": bk_biz_id,
            "data_source_label": query_config.data_source_label,
            "data_type_label": query_config.data_type_label,
            "expression": item.expression,
            "functions": item.functions,
            "query_configs": [],
        }

        for query_config in item.query_configs:
            new_query_config = {}

            for field in query_config_fields:
                new_query_config[field] = query_config.config.get(field)

            # 聚合维度排序
            if new_query_config["agg_dimension"]:
                new_query_config["agg_dimension"] = sorted(new_query_config["agg_dimension"])

            item_query["query_configs"].append(new_query_config)
        query.append(item_query)

    content = json.dumps(query, sort_keys=True)
    return xxhash.xxh64(content).hexdigest()


def rebuild_strategy_priority_group_key(apps, schema_editor):
    """
    重建策略优先级分组key
    """
    Strategy = apps.get_model("bkmonitor", "StrategyModel")
    Item = apps.get_model("bkmonitor", "ItemModel")
    QueryConfig = apps.get_model("bkmonitor", "QueryConfigModel")

    for strategy in Strategy.objects.exclude(priority=None):
        items = Item.objects.filter(strategy_id=strategy.id)
        query_configs = QueryConfig.objects.filter(strategy_id=strategy.id)
        item_to_query_configs = defaultdict(list)
        for query_config in query_configs:
            item_to_query_configs[query_config.item_id].append(query_config)
        for item in items:
            item.query_configs = item_to_query_configs[item.id]
        strategy.priority_group_key = get_priority_group_key(strategy.bk_biz_id, items)
        strategy.save(update_fields=["priority_group_key"])


class Migration(migrations.Migration):
    dependencies = [
        ('bkmonitor', '0161_merge_20240426_1808'),
    ]

    operations = [
        migrations.RunPython(rebuild_strategy_priority_group_key),
    ]
