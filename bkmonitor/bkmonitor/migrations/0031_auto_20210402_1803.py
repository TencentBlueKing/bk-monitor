# -*- coding: utf-8 -*-
"""
Tencent is pleased to support the open source community by making 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
Copyright (C) 2017-2025 Tencent. All rights reserved.
Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://opensource.org/licenses/MIT
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
"""
# Generated by Django 1.11.23 on 2021-04-02 10:03


from django.db import migrations, models

import bkmonitor.middlewares.source
import bkmonitor.models.strategy


class Migration(migrations.Migration):

    dependencies = [
        ("bkmonitor", "0030_merge_20210330_1134"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlgorithmModel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("strategy_id", models.IntegerField(db_index=True, verbose_name="关联策略ID")),
                ("item_id", models.IntegerField(db_index=True, verbose_name="关联监控项ID")),
                (
                    "level",
                    models.IntegerField(
                        choices=[(1, "致命"), (2, "预警"), (3, "提醒")], default=3, max_length=2, verbose_name="告警级别"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Threshold", "静态阈值算法"),
                            ("SimpleRingRatio", "简易环比算法"),
                            ("AdvancedRingRatio", "高级环比算法"),
                            ("SimpleYearRound", "简易同比算法"),
                            ("AdvancedYearRound", "高级同比算法"),
                            ("PartialNodes", "部分节点数算法"),
                            ("OsRestart", "主机重启算法"),
                            ("ProcPort", "进程端口算法"),
                            ("PingUnreachable", "Ping不可达算法"),
                            ("YearRoundAmplitude", "同比振幅算法"),
                            ("YearRoundRange", "同比区间算法"),
                            ("RingRatioAmplitude", "环比振幅算法"),
                            ("IntelligentDetect", "智能异常检测算法"),
                        ],
                        db_index=True,
                        max_length=64,
                        verbose_name="算法类型",
                    ),
                ),
                ("unit_prefix", models.CharField(blank=True, default="", max_length=32, verbose_name="算法单位前缀")),
                ("config", models.JSONField(default=dict, verbose_name="算法配置")),
            ],
            options={
                "verbose_name": "检测配置",
                "verbose_name_plural": "检测配置",
                "db_table": "alarm_algorithm_v2",
            },
        ),
        migrations.CreateModel(
            name="DetectModel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("strategy_id", models.IntegerField(db_index=True, verbose_name="关联策略ID")),
                (
                    "level",
                    models.IntegerField(
                        choices=[(1, "致命"), (2, "预警"), (3, "提醒")], default=3, max_length=2, verbose_name="告警级别"
                    ),
                ),
                ("expression", models.TextField(default="", verbose_name="计算公式")),
                ("trigger_config", models.JSONField(default=dict, verbose_name="触发条件配置")),
                ("recovery_config", models.JSONField(default=dict, verbose_name="恢复条件配置")),
                (
                    "connector",
                    models.CharField(choices=[("and", "AND"), ("or", "OR")], max_length=4, verbose_name="同级别算法连接符"),
                ),
            ],
            options={
                "verbose_name": "检测配置",
                "verbose_name_plural": "检测配置",
                "db_table": "alarm_detect_v2",
            },
        ),
        migrations.CreateModel(
            name="ItemModel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("strategy_id", models.IntegerField(db_index=True, verbose_name="关联策略ID")),
                ("name", models.CharField(max_length=256, verbose_name="监控项名称")),
                ("expression", models.TextField(verbose_name="计算公式")),
                ("origin_sql", models.TextField(verbose_name="原始查询语句")),
                (
                    "no_data_config",
                    models.JSONField(default=bkmonitor.models.strategy.no_data_config, verbose_name="无数据配置"),
                ),
                (
                    "target",
                    models.JSONField(default=bkmonitor.models.strategy.default_target, verbose_name="监控目标"),
                ),
                ("meta", models.JSONField(default=list, verbose_name="查询配置元数据")),
            ],
            options={
                "verbose_name": "监控项配置",
                "verbose_name_plural": "监控项配置",
                "db_table": "alarm_item_v2",
            },
        ),
        migrations.CreateModel(
            name="QueryConfigModel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("strategy_id", models.IntegerField(db_index=True, verbose_name="关联策略ID")),
                ("item_id", models.IntegerField(db_index=True, verbose_name="关联监控项ID")),
                ("alias", models.CharField(max_length=12, verbose_name="别名")),
                ("data_source_label", models.CharField(max_length=32, verbose_name="数据来源标签")),
                ("data_type_label", models.CharField(max_length=32, verbose_name="数据类型标签")),
                ("metric_id", models.CharField(max_length=128, verbose_name="指标ID")),
                ("config", models.JSONField(default=dict, verbose_name="查询配置")),
            ],
            options={
                "verbose_name": "查询配置表",
                "verbose_name_plural": "查询配置表",
                "db_table": "alarm_query_config_v2",
            },
        ),
        migrations.CreateModel(
            name="StrategyModel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(db_index=True, max_length=128, verbose_name="策略名称")),
                ("bk_biz_id", models.IntegerField(verbose_name="业务ID")),
                (
                    "source",
                    models.CharField(
                        default=bkmonitor.middlewares.source.get_source_app_code, max_length=32, verbose_name="来源系统"
                    ),
                ),
                ("scenario", models.CharField(max_length=32, verbose_name="监控场景")),
                (
                    "type",
                    models.CharField(
                        choices=[("monitor", "监控"), ("fta_solution", "故障自愈")],
                        db_index=True,
                        max_length=12,
                        verbose_name="策略类型",
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True, verbose_name="是否启用")),
                ("create_user", models.CharField(default="", max_length=32, verbose_name="创建人")),
                ("create_time", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                ("update_user", models.CharField(default="", max_length=32, verbose_name="最后修改人")),
                ("update_time", models.DateTimeField(auto_now=True, verbose_name="最后修改时间")),
            ],
            options={
                "verbose_name": "策略配置",
                "verbose_name_plural": "策略配置",
                "db_table": "alarm_strategy_v2",
            },
        ),
        migrations.AlterIndexTogether(
            name="strategymodel",
            index_together={("is_enabled", "bk_biz_id", "scenario")},
        ),
    ]
