# -*- coding: utf-8 -*-
"""
Tencent is pleased to support the open source community by making 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
Copyright (C) 2017-2021 THL A29 Limited, a Tencent company. All rights reserved.
Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://opensource.org/licenses/MIT
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
"""
# Generated by Django 1.11.23 on 2021-08-19 13:59
from __future__ import unicode_literals

import itertools
from collections import defaultdict

from django.db import migrations, models
from django.db.models import Q

from constants.data_source import DataSourceLabel, DataTypeLabel


def get_no_data_default_dimensions(item, dimensions, scenario):
    HOST_SCENARIO = ["os", "host_process", "host_device"]
    SERVICE_SCENARIO = ["service_module", "component", "service_process"]
    UPTIME_SCENARIO = ["uptimecheck"]

    dimensions = set(dimensions)
    if scenario in UPTIME_SCENARIO and "task_id" in dimensions:
        return ["task_id"]
    if scenario in SERVICE_SCENARIO:
        if "bk_target_service_instance_id" in dimensions:
            return ["bk_target_service_instance_id"]
        if list(itertools.chain(*item["target"])) and len({"bk_obj_id", "bk_inst_id"} & dimensions) == 2:
            return ["bk_obj_id", "bk_inst_id"]
    if scenario in HOST_SCENARIO:
        if len({"bk_target_ip", "bk_target_cloud_id"} & dimensions) == 2:
            # 监控目标的IP和云区域ID
            return ["bk_target_ip", "bk_target_cloud_id"]
        if len({"ip", "bk_cloud_id"} & dimensions) == 2:
            # 采集器的IP和云区域ID
            return ["ip", "bk_cloud_id"]
        if list(itertools.chain(*item["target"])) and len({"bk_obj_id", "bk_inst_id"} & dimensions) == 2:
            return ["bk_obj_id", "bk_inst_id"]

    return []


def add_default_no_data_dimensions(apps, scheme_editor):
    """
    将Item中no_data_config的agg_dimension默认值补全
    """
    Item = apps.get_model("bkmonitor", "ItemModel")
    Strategy = apps.get_model("bkmonitor", "StrategyModel")
    QueryConfig = apps.get_model("bkmonitor", "QueryConfigModel")

    strategy_dimensions = defaultdict(set)
    query_configs = (
        QueryConfig.objects.exclude(
            Q(data_source_label__in=[DataSourceLabel.BK_LOG_SEARCH, DataSourceLabel.BK_DATA, DataSourceLabel.CUSTOM])
            | Q(data_source_label=DataSourceLabel.BK_MONITOR_COLLECTOR, data_type_label=DataTypeLabel.EVENT)
        )
        .annotate(agg_dimension=models.F("config__agg_dimension"))
        .values("strategy_id", "agg_dimension")
    )
    for query_config in query_configs:
        strategy_dimensions[query_config["strategy_id"]].update(query_config["agg_dimension"])

    strategy_scenarios = {}
    strategies = Strategy.objects.filter(id__in=strategy_dimensions.keys()).values("scenario", "id")
    for strategy in strategies:
        strategy_scenarios[strategy["id"]] = strategy["scenario"]

    item_no_data_dimensions = defaultdict(list)
    items = Item.objects.filter(strategy_id__in=strategy_scenarios.keys()).values("id", "strategy_id", "target")
    for item in items:
        strategy_id = item["strategy_id"]
        if strategy_id not in strategy_dimensions or strategy_id not in strategy_scenarios:
            continue

        scenario = strategy_scenarios[strategy_id]
        dimensions = strategy_dimensions[strategy_id]
        no_data_dimensions = get_no_data_default_dimensions(item, dimensions, scenario)
        item_no_data_dimensions[tuple(no_data_dimensions)].append(item["id"])

    for no_data_dimension, item_ids in item_no_data_dimensions.items():
        Item.objects.filter(id__in=item_ids).update(no_data_config__agg_dimension=list(no_data_dimension))


class Migration(migrations.Migration):
    dependencies = [
        ("bkmonitor", "0045_fix_custom_event_metric_id"),
    ]

    operations = [migrations.RunPython(add_default_no_data_dimensions)]
