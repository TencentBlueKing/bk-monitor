# Generated by Django 3.2.25 on 2025-10-17 03:01

import bkmonitor.utils.db.fields
from django.db import migrations, models


def insert_default_field_normalizer_config(apps, schema_editor):
    """插入默认的字段标准化配置"""
    FieldNormalizerConfig = apps.get_model("apm", "FieldNormalizerConfig")

    default_configs = [
        {
            "kind": "",
            "predicate_key": "attributes.http.method,attributes.http.request.method",
            "rules": [
                {"key": "attributes.http.method", "op": "or", "values": ["attributes.http.request.method"]},
                {
                    "key": "attributes.http.status_code",
                    "op": "or",
                    "values": ["attributes.http.response.status_code"],
                },
                {"key": "attributes.http.url", "op": "or", "values": ["attributes.url.full"]},
                {"key": "attributes.http.scheme", "op": "or", "values": ["attributes.url.scheme"]},
                {"key": "attributes.http.client_ip", "op": "or", "values": ["attributes.client.address"]},
                {"key": "attributes.http.target", "op": "or", "values": ["attributes.url.path"]},
                {
                    "key": "attributes.net.sock.peer.addr",
                    "op": "or",
                    "values": ["attributes.network.peer.address"],
                },
                {
                    "key": "attributes.net.sock.peer.port",
                    "op": "or",
                    "values": ["attributes.network.peer.port"],
                },
                {
                    "key": "attributes.net.sock.host.addr",
                    "op": "or",
                    "values": ["attributes.network.local.address"],
                },
                {
                    "key": "attributes.net.sock.host.port",
                    "op": "or",
                    "values": ["attributes.network.local.port"],
                },
            ],
        },
        {
            "kind": "SPAN_KIND_SERVER",
            "predicate_key": "attributes.http.method,attributes.http.request.method",
            "rules": [
                {
                    "key": "attributes.net.peer.name",
                    "op": "concat",
                    "values": ["attributes.client.address", "attributes.client.port"],
                },
                {"key": "attributes.net.peer.ip", "op": "or", "values": ["attributes.client.address"]},
                {"key": "attributes.net.peer.port", "op": "or", "values": ["attributes.client.port"]},
                {
                    "key": "attributes.net.host.name",
                    "op": "concat",
                    "values": ["attributes.server.address", "attributes.server.port"],
                },
                {"key": "attributes.net.host.ip", "op": "or", "values": ["attributes.server.address"]},
                {"key": "attributes.net.host.port", "op": "or", "values": ["attributes.server.port"]},
            ],
        },
        {
            "kind": "SPAN_KIND_CLIENT",
            "predicate_key": "attributes.http.method,attributes.http.request.method",
            "rules": [
                {
                    "key": "attributes.net.peer.name",
                    "op": "concat",
                    "values": ["attributes.server.address", "attributes.server.port"],
                },
                {
                    "key": "attributes.net.peer.ip",
                    "op": "or",
                    "values": ["attributes.server.address", "attributes.network.peer.address"],
                },
                {
                    "key": "attributes.net.peer.port",
                    "op": "or",
                    "values": ["attributes.server.port", "attributes.network.peer.port"],
                },
                {
                    "key": "attributes.net.host.name",
                    "op": "concat",
                    "values": ["attributes.client.address", "attributes.client.port"],
                },
                {"key": "attributes.net.host.ip", "op": "or", "values": ["attributes.client.address"]},
                {"key": "attributes.net.host.port", "op": "or", "values": ["attributes.client.port"]},
            ],
        },
        {
            "kind": "SPAN_KIND_CLIENT",
            "predicate_key": "attributes.db.system,attributes.db.system.name",
            "rules": [
                {
                    "key": "attributes.net.peer.name",
                    "op": "concat",
                    "values": ["attributes.server.address", "attributes.server.port"],
                },
                {
                    "key": "attributes.net.peer.ip",
                    "op": "or",
                    "values": ["attributes.server.address", "attributes.network.peer.address"],
                },
                {
                    "key": "attributes.net.peer.port",
                    "op": "or",
                    "values": ["attributes.server.port", "attributes.network.peer.port"],
                },
                {
                    "key": "attributes.net.host.name",
                    "op": "concat",
                    "values": ["attributes.client.address", "attributes.client.port"],
                },
                {"key": "attributes.net.host.ip", "op": "or", "values": ["attributes.client.address"]},
                {"key": "attributes.net.host.port", "op": "or", "values": ["attributes.client.port"]},
            ],
        },
        {
            "kind": "",
            "predicate_key": "attributes.db.system,attributes.db.system.name",
            "rules": [
                {
                    "key": "attributes.net.sock.peer.addr",
                    "op": "or",
                    "values": ["attributes.network.peer.address"],
                },
                {
                    "key": "attributes.net.sock.peer.port",
                    "op": "or",
                    "values": ["attributes.network.peer.port"],
                },
                {"key": "attributes.db.name", "op": "or", "values": ["attributes.db.namespace"]},
                {"key": "attributes.db.statement", "op": "or", "values": ["attributes.db.query.text"]},
                {"key": "attributes.db.sql.table", "op": "or", "values": ["attributes.db.collection.name"]},
            ],
        },
        {
            "kind": "",
            "predicate_key": "attributes.messaging.system",
            "rules": [
                {
                    "key": "attributes.net.sock.peer.addr",
                    "op": "or",
                    "values": ["attributes.network.peer.address"],
                },
                {
                    "key": "attributes.net.sock.peer.port",
                    "op": "or",
                    "values": ["attributes.network.peer.port"],
                },
                {"key": "attributes.topic", "op": "or", "values": ["attributes.messaging.destination.name"]},
            ],
        },
    ]

    # 批量创建配置
    configs_to_create = [
        FieldNormalizerConfig(kind=config["kind"], predicate_key=config["predicate_key"], rules=config["rules"])
        for config in default_configs
    ]

    FieldNormalizerConfig.objects.bulk_create(configs_to_create)


class Migration(migrations.Migration):
    dependencies = [
        ("apm", "0050_toponode_is_permanent"),
    ]

    operations = [
        migrations.CreateModel(
            name="FieldNormalizerConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "kind",
                    models.CharField(
                        help_text="例如: SPAN_KIND_SERVER, SPAN_KIND_CLIENT 等", max_length=50, verbose_name="Span类型"
                    ),
                ),
                (
                    "predicate_key",
                    models.CharField(
                        help_text="用于判断是否应用该规则的字段，多个字段用逗号分隔",
                        max_length=255,
                        verbose_name="判断字段",
                    ),
                ),
                (
                    "rules",
                    bkmonitor.utils.db.fields.JsonField(
                        help_text="字段标准化的具体规则配置", verbose_name="字段映射规则"
                    ),
                ),
            ],
            options={
                "verbose_name": "字段标准化配置",
                "verbose_name_plural": "字段标准化配置",
                "ordering": ["kind"],
            },
        ),
        migrations.RunPython(insert_default_field_normalizer_config),
    ]
