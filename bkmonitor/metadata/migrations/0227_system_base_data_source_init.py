# Generated by Django 3.2.25 on 2025-06-03 12:26

from django.db import migrations


def create_system_base_metric_data_source(apps, schema_editor):
    from metadata import models
    from metadata.resources import CreateTimeSeriesGroupResource

    bk_data_id = 1100030

    if models.DataSource.objects.filter(bk_data_id=bk_data_id).exists():
        return

    bk_biz_id = 0
    time_series_group_name = "系统基础指标"
    label = "component"
    data_name = "system_base_metric"
    etl_config = "bk_standard_v2_time_series"
    type_label = "time_series"
    source_label = "bk_monitor"
    operator = "system"
    data_label = "system_base"

    try:
        models.DataSource.create_data_source(
            bk_data_id=bk_data_id,
            data_name=data_name,
            etl_config=etl_config,
            operator=operator,
            source_label=source_label,
            type_label=type_label,
            is_platform_data_id=True,
        )

        CreateTimeSeriesGroupResource().request(
            bk_data_id=bk_data_id,
            bk_biz_id=bk_biz_id,
            time_series_group_name=time_series_group_name,
            label=label,
            operator=operator,
            data_label=data_label,
        )
    except Exception as e:
        print(e)
        return


def create_system_base_event_data_source(apps, schema_editor):
    from metadata import models
    from metadata.resources import CreateEventGroupResource

    bk_data_id = 1100031
    if models.DataSource.objects.filter(bk_data_id=bk_data_id).exists():
        return

    bk_biz_id = 0
    data_name = "system_base_events"
    etl_config = "bk_standard_v2_event"
    operator = "system"
    source_label = "bk_monitor"
    type_label = "event"
    event_group_name = "系统基础事件"
    label = "component"
    data_label = "system_base"

    try:
        models.DataSource.create_data_source(
            bk_data_id=bk_data_id,
            data_name=data_name,
            etl_config=etl_config,
            operator=operator,
            source_label=source_label,
            type_label=type_label,
            is_platform_data_id=True,
        )

        CreateEventGroupResource().request(
            bk_data_id=bk_data_id,
            bk_biz_id=bk_biz_id,
            event_group_name=event_group_name,
            label=label,
            operator=operator,
            data_label=data_label,
        )
    except Exception as e:
        print(e)
        return


class Migration(migrations.Migration):
    dependencies = [
        ("metadata", "0226_auto_20250526_1644"),
    ]

    operations = [
        migrations.RunPython(create_system_base_metric_data_source),
        migrations.RunPython(create_system_base_event_data_source),
    ]
