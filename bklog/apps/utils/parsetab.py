# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "ARG COMMAND DOUBLE_QUOTED_STRING PIPE RAW_PATTERN SINGLE_QUOTED_STRINGcommands : command\n    | command PIPE commandscommand : cmd_prefix args_patterncmd_prefix :\n    | COMMAND\n    | COMMAND args\n    | argsargs_pattern : args pattern\n    | patternargs : ARG\n    | ARG argspattern : DOUBLE_QUOTED_STRING\n    | SINGLE_QUOTED_STRINGpattern : RAW_PATTERN"

_lr_action_items = {
    "ARG": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            14,
            15,
        ],
        [
            6,
            6,
            6,
            -7,
            6,
            6,
            -6,
            -11,
        ],
    ),
    "DOUBLE_QUOTED_STRING": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            9,
            14,
            15,
        ],
        [
            -4,
            11,
            -5,
            -7,
            -10,
            -4,
            11,
            -6,
            -11,
        ],
    ),
    "SINGLE_QUOTED_STRING": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            9,
            14,
            15,
        ],
        [
            -4,
            12,
            -5,
            -7,
            -10,
            -4,
            12,
            -6,
            -11,
        ],
    ),
    "RAW_PATTERN": (
        [
            0,
            3,
            4,
            5,
            6,
            7,
            9,
            14,
            15,
        ],
        [
            -4,
            13,
            -5,
            -7,
            -10,
            -4,
            13,
            -6,
            -11,
        ],
    ),
    "COMMAND": (
        [
            0,
            7,
        ],
        [
            4,
            4,
        ],
    ),
    "$end": (
        [
            1,
            2,
            8,
            10,
            11,
            12,
            13,
            16,
            17,
        ],
        [
            0,
            -1,
            -3,
            -9,
            -12,
            -13,
            -14,
            -2,
            -8,
        ],
    ),
    "PIPE": (
        [
            2,
            8,
            10,
            11,
            12,
            13,
            17,
        ],
        [
            7,
            -3,
            -9,
            -12,
            -13,
            -14,
            -8,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if _x not in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "commands": (
        [
            0,
            7,
        ],
        [
            1,
            16,
        ],
    ),
    "command": (
        [
            0,
            7,
        ],
        [
            2,
            2,
        ],
    ),
    "cmd_prefix": (
        [
            0,
            7,
        ],
        [
            3,
            3,
        ],
    ),
    "args": (
        [
            0,
            3,
            4,
            6,
            7,
        ],
        [
            5,
            9,
            14,
            15,
            5,
        ],
    ),
    "args_pattern": (
        [
            3,
        ],
        [
            8,
        ],
    ),
    "pattern": (
        [
            3,
            9,
        ],
        [
            10,
            17,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if _x not in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> commands", "S'", 1, None, None, None),
    ("commands -> command", "commands", 1, "p_commands", "grep_syntax_parse.py", 59),
    ("commands -> command PIPE commands", "commands", 3, "p_commands", "grep_syntax_parse.py", 60),
    ("command -> cmd_prefix args_pattern", "command", 2, "p_command", "grep_syntax_parse.py", 68),
    ("cmd_prefix -> <empty>", "cmd_prefix", 0, "p_cmd_prefix", "grep_syntax_parse.py", 81),
    ("cmd_prefix -> COMMAND", "cmd_prefix", 1, "p_cmd_prefix", "grep_syntax_parse.py", 82),
    ("cmd_prefix -> COMMAND args", "cmd_prefix", 2, "p_cmd_prefix", "grep_syntax_parse.py", 83),
    ("cmd_prefix -> args", "cmd_prefix", 1, "p_cmd_prefix", "grep_syntax_parse.py", 84),
    ("args_pattern -> args pattern", "args_pattern", 2, "p_args_pattern", "grep_syntax_parse.py", 97),
    ("args_pattern -> pattern", "args_pattern", 1, "p_args_pattern", "grep_syntax_parse.py", 98),
    ("args -> ARG", "args", 1, "p_args", "grep_syntax_parse.py", 106),
    ("args -> ARG args", "args", 2, "p_args", "grep_syntax_parse.py", 107),
    ("pattern -> DOUBLE_QUOTED_STRING", "pattern", 1, "p_pattern_string", "grep_syntax_parse.py", 115),
    ("pattern -> SINGLE_QUOTED_STRING", "pattern", 1, "p_pattern_string", "grep_syntax_parse.py", 116),
    ("pattern -> RAW_PATTERN", "pattern", 1, "p_pattern_raw", "grep_syntax_parse.py", 121),
]
